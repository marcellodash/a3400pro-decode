import struct
import sys

types = (0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29)

lookup2 = [
         0,    176,   -336,   -160,
         0,    288,   -560,   -272,
         0,    352,   -704,   -352,
         0,    448,   -880,   -432,
         0,    496,   -992,   -496,
         0,    560,  -1104,   -544,
         0,    624,  -1232,   -608,
         0,    704,  -1392,   -688,
         0,    784,  -1568,   -784,
         0,    880,  -1744,   -864,
         0,    992,  -1968,   -976,
         0,   1104,  -2192,  -1088,
         0,   1232,  -2464,  -1232,
         0,   1376,  -2752,  -1376,
         0,   1552,  -3088,  -1536,
         0,   1728,  -3440,  -1712,
         0,   1024,  -2048,  -1024,
         0,   2048,  -4096,  -2048,
         0,   3072,  -6144,  -3072,
         0,   4096,  -8192,  -4096,
         0,   5120, -10240,  -5120,
         0,   6144, -12288,  -6144,
         0,   7168, -14336,  -7168,
         0,   8192, -16384,  -8192,
         0,   9216, -18432,  -9216,
         0,  10240, -20480, -10240,
         0,  11264, -22528, -11264,
         0,  12288, -24576, -12288,
         0,  13312, -26624, -13312,
         0,  14336, -28672, -14336,
         0,  15360, -30720, -15360,
         0,  16384, -32768, -16384,
]

lookup3 = [
         0,     96,    176,    256,   -336,   -240,   -160,    -80,
         0,    144,    288,    432,   -560,   -416,   -272,   -128,
         0,    176,    352,    528,   -704,   -528,   -352,   -176,
         0,    224,    448,    672,   -880,   -656,   -432,   -208,
         0,    256,    496,    752,   -992,   -736,   -496,   -240,
         0,    288,    560,    832,  -1104,   -816,   -544,   -272,
         0,    320,    624,    944,  -1232,   -912,   -608,   -288,
         0,    352,    704,   1056,  -1392,  -1040,   -688,   -336,
         0,    400,    784,   1184,  -1568,  -1168,   -784,   -384,
         0,    448,    880,   1312,  -1744,  -1296,   -864,   -432,
         0,    496,    992,   1472,  -1968,  -1472,   -976,   -496,
         0,    560,   1104,   1648,  -2192,  -1632,  -1088,   -544,
         0,    624,   1232,   1856,  -2464,  -1840,  -1232,   -608,
         0,    688,   1376,   2064,  -2752,  -2064,  -1376,   -688,
         0,    784,   1552,   2320,  -3088,  -2304,  -1536,   -768,
         0,    864,   1728,   2592,  -3440,  -2576,  -1712,   -848,
         0,    512,   1024,   1536,  -2048,  -1536,  -1024,   -512,
         0,   1024,   2048,   3072,  -4096,  -3072,  -2048,  -1024,
         0,   1536,   3072,   4608,  -6144,  -4608,  -3072,  -1536,
         0,   2048,   4096,   6144,  -8192,  -6144,  -4096,  -2048,
         0,   2560,   5120,   7680, -10240,  -7680,  -5120,  -2560,
         0,   3072,   6144,   9216, -12288,  -9216,  -6144,  -3072,
         0,   3584,   7168,  10752, -14336, -10752,  -7168,  -3584,
         0,   4096,   8192,  12288, -16384, -12288,  -8192,  -4096,
         0,   4608,   9216,  13824, -18432, -13824,  -9216,  -4608,
         0,   5120,  10240,  15360, -20480, -15360, -10240,  -5120,
         0,   5632,  11264,  16896, -22528, -16896, -11264,  -5632,
         0,   6144,  12288,  18432, -24576, -18432, -12288,  -6144,
         0,   6656,  13312,  19968, -26624, -19968, -13312,  -6656,
         0,   7168,  14336,  21504, -28672, -21504, -14336,  -7168,
         0,   7680,  15360,  23040, -30720, -23040, -15360,  -7680,
         0,   8192,  16384,  24576, -32768, -24576, -16384,  -8192,
]

lookup4 = [
         0,     12,     24,     36,     48,     60,     72,     84,
        96,    104,    112,    120,    128,    140,    152,    164,
       176,    188,    200,    212,    224,    232,    240,    248,
       256,    268,    280,    292,    304,    316,    328,    340,
      -336,   -324,   -312,   -300,   -288,   -276,   -264,   -252,
      -240,   -232,   -224,   -216,   -208,   -196,   -184,   -172,
      -160,   -148,   -136,   -124,   -112,   -104,    -96,    -88,
       -80,    -68,    -56,    -44,    -32,    -24,    -16,     -8,

         0,     20,     40,     60,     80,     96,    112,    128,
       144,    164,    184,    204,    224,    240,    256,    272,
       288,    304,    320,    336,    352,    372,    392,    412,
       432,    448,    464,    480,    496,    512,    528,    544,
      -560,   -540,   -520,   -500,   -480,   -464,   -448,   -432,
      -416,   -396,   -376,   -356,   -336,   -320,   -304,   -288,
      -272,   -256,   -240,   -224,   -208,   -188,   -168,   -148,
      -128,   -112,    -96,    -80,    -64,    -48,    -32,    -16,

         0,     24,     48,     72,     96,    116,    136,    156,
       176,    200,    224,    248,    272,    292,    312,    332,
       352,    376,    400,    424,    448,    468,    488,    508,
       528,    552,    576,    600,    624,    648,    672,    696,
      -704,   -680,   -656,   -632,   -608,   -588,   -568,   -548,
      -528,   -504,   -480,   -456,   -432,   -412,   -392,   -372,
      -352,   -328,   -304,   -280,   -256,   -236,   -216,   -196,
      -176,   -152,   -128,   -104,    -80,    -60,    -40,    -20,

         0,     28,     56,     84,    112,    140,    168,    196,
       224,    252,    280,    308,    336,    364,    392,    420,
       448,    476,    504,    532,    560,    588,    616,    644,
       672,    700,    728,    756,    784,    812,    840,    868,
      -880,   -852,   -824,   -796,   -768,   -740,   -712,   -684,
      -656,   -628,   -600,   -572,   -544,   -516,   -488,   -460,
      -432,   -404,   -376,   -348,   -320,   -292,   -264,   -236,
      -208,   -180,   -152,   -124,    -96,    -72,    -48,    -24,

         0,     32,     64,     96,    128,    160,    192,    224,
       256,    288,    320,    352,    384,    412,    440,    468,
       496,    528,    560,    592,    624,    656,    688,    720,
       752,    784,    816,    848,    880,    912,    944,    976,
      -992,   -960,   -928,   -896,   -864,   -832,   -800,   -768,
      -736,   -704,   -672,   -640,   -608,   -580,   -552,   -524,
      -496,   -464,   -432,   -400,   -368,   -336,   -304,   -272,
      -240,   -208,   -176,   -144,   -112,    -84,    -56,    -28,

         0,     36,     72,    108,    144,    180,    216,    252,
       288,    320,    352,    384,    416,    452,    488,    524,
       560,    596,    632,    668,    704,    736,    768,    800,
       832,    868,    904,    940,    976,   1012,   1048,   1084,
     -1104,  -1068,  -1032,   -996,   -960,   -924,   -888,   -852,
      -816,   -784,   -752,   -720,   -688,   -652,   -616,   -580,
      -544,   -508,   -472,   -436,   -400,   -368,   -336,   -304,
      -272,   -236,   -200,   -164,   -128,    -96,    -64,    -32,

         0,     40,     80,    120,    160,    200,    240,    280,
       320,    360,    400,    440,    480,    516,    552,    588,
       624,    664,    704,    744,    784,    824,    864,    904,
       944,    980,   1016,   1052,   1088,   1124,   1160,   1196,
     -1232,  -1192,  -1152,  -1112,  -1072,  -1032,   -992,   -952,
      -912,   -872,   -832,   -792,   -752,   -716,   -680,   -644,
      -608,   -568,   -528,   -488,   -448,   -408,   -368,   -328,
      -288,   -252,   -216,   -180,   -144,   -108,    -72,    -36,

         0,     44,     88,    132,    176,    220,    264,    308,
       352,    396,    440,    484,    528,    572,    616,    660,
       704,    748,    792,    836,    880,    924,    968,   1012,
      1056,   1100,   1144,   1188,   1232,   1276,   1320,   1364,
     -1392,  -1348,  -1304,  -1260,  -1216,  -1172,  -1128,  -1084,
     -1040,   -996,   -952,   -908,   -864,   -820,   -776,   -732,
      -688,   -644,   -600,   -556,   -512,   -468,   -424,   -380,
      -336,   -292,   -248,   -204,   -160,   -120,    -80,    -40,

         0,     52,    104,    156,    208,    256,    304,    352,
       400,    448,    496,    544,    592,    640,    688,    736,
       784,    832,    880,    928,    976,   1028,   1080,   1132,
      1184,   1232,   1280,   1328,   1376,   1424,   1472,   1520,
     -1568,  -1516,  -1464,  -1412,  -1360,  -1312,  -1264,  -1216,
     -1168,  -1120,  -1072,  -1024,   -976,   -928,   -880,   -832,
      -784,   -736,   -688,   -640,   -592,   -540,   -488,   -436,
      -384,   -336,   -288,   -240,   -192,   -144,    -96,    -48,

         0,     56,    112,    168,    224,    280,    336,    392,
       448,    500,    552,    604,    656,    712,    768,    824,
       880,    936,    992,   1048,   1104,   1156,   1208,   1260,
      1312,   1368,   1424,   1480,   1536,   1592,   1648,   1704,
     -1744,  -1688,  -1632,  -1576,  -1520,  -1464,  -1408,  -1352,
     -1296,  -1244,  -1192,  -1140,  -1088,  -1032,   -976,   -920,
      -864,   -808,   -752,   -696,   -640,   -588,   -536,   -484,
      -432,   -376,   -320,   -264,   -208,   -156,   -104,    -52,

         0,     64,    128,    192,    256,    316,    376,    436,
       496,    556,    616,    676,    736,    800,    864,    928,
       992,   1052,   1112,   1172,   1232,   1292,   1352,   1412,
      1472,   1536,   1600,   1664,   1728,   1792,   1856,   1920,
     -1968,  -1904,  -1840,  -1776,  -1712,  -1652,  -1592,  -1532,
     -1472,  -1412,  -1352,  -1292,  -1232,  -1168,  -1104,  -1040,
      -976,   -916,   -856,   -796,   -736,   -676,   -616,   -556,
      -496,   -432,   -368,   -304,   -240,   -180,   -120,    -60,

         0,     72,    144,    216,    288,    356,    424,    492,
       560,    628,    696,    764,    832,    900,    968,   1036,
      1104,   1172,   1240,   1308,   1376,   1444,   1512,   1580,
      1648,   1716,   1784,   1852,   1920,   1988,   2056,   2124,
     -2192,  -2120,  -2048,  -1976,  -1904,  -1836,  -1768,  -1700,
     -1632,  -1564,  -1496,  -1428,  -1360,  -1292,  -1224,  -1156,
     -1088,  -1020,   -952,   -884,   -816,   -748,   -680,   -612,
      -544,   -476,   -408,   -340,   -272,   -204,   -136,    -68,

         0,     80,    160,    240,    320,    396,    472,    548,
       624,    700,    776,    852,    928,   1004,   1080,   1156,
      1232,   1308,   1384,   1460,   1536,   1616,   1696,   1776,
      1856,   1932,   2008,   2084,   2160,   2236,   2312,   2388,
     -2464,  -2384,  -2304,  -2224,  -2144,  -2068,  -1992,  -1916,
     -1840,  -1764,  -1688,  -1612,  -1536,  -1460,  -1384,  -1308,
     -1232,  -1156,  -1080,  -1004,   -928,   -848,   -768,   -688,
      -608,   -532,   -456,   -380,   -304,   -228,   -152,    -76,

         0,     88,    176,    264,    352,    436,    520,    604,
       688,    776,    864,    952,   1040,   1124,   1208,   1292,
      1376,   1464,   1552,   1640,   1728,   1812,   1896,   1980,
      2064,   2152,   2240,   2328,   2416,   2504,   2592,   2680,
     -2752,  -2664,  -2576,  -2488,  -2400,  -2316,  -2232,  -2148,
     -2064,  -1976,  -1888,  -1800,  -1712,  -1628,  -1544,  -1460,
     -1376,  -1288,  -1200,  -1112,  -1024,   -940,   -856,   -772,
      -688,   -600,   -512,   -424,   -336,   -252,   -168,    -84,

         0,     96,    192,    288,    384,    484,    584,    684,
       784,    880,    976,   1072,   1168,   1264,   1360,   1456,
      1552,   1648,   1744,   1840,   1936,   2032,   2128,   2224,
      2320,   2416,   2512,   2608,   2704,   2800,   2896,   2992,
     -3088,  -2992,  -2896,  -2800,  -2704,  -2604,  -2504,  -2404,
     -2304,  -2208,  -2112,  -2016,  -1920,  -1824,  -1728,  -1632,
     -1536,  -1440,  -1344,  -1248,  -1152,  -1056,   -960,   -864,
      -768,   -672,   -576,   -480,   -384,   -288,   -192,    -96,

         0,    108,    216,    324,    432,    540,    648,    756,
       864,    972,   1080,   1188,   1296,   1404,   1512,   1620,
      1728,   1836,   1944,   2052,   2160,   2268,   2376,   2484,
      2592,   2700,   2808,   2916,   3024,   3132,   3240,   3348,
     -3440,  -3332,  -3224,  -3116,  -3008,  -2900,  -2792,  -2684,
     -2576,  -2468,  -2360,  -2252,  -2144,  -2036,  -1928,  -1820,
     -1712,  -1604,  -1496,  -1388,  -1280,  -1172,  -1064,   -956,
      -848,   -740,   -632,   -524,   -416,   -312,   -208,   -104,

         0,     64,    128,    192,    256,    320,    384,    448,
       512,    576,    640,    704,    768,    832,    896,    960,
      1024,   1088,   1152,   1216,   1280,   1344,   1408,   1472,
      1536,   1600,   1664,   1728,   1792,   1856,   1920,   1984,
     -2048,  -1984,  -1920,  -1856,  -1792,  -1728,  -1664,  -1600,
     -1536,  -1472,  -1408,  -1344,  -1280,  -1216,  -1152,  -1088,
     -1024,   -960,   -896,   -832,   -768,   -704,   -640,   -576,
      -512,   -448,   -384,   -320,   -256,   -192,   -128,    -64,

         0,    128,    256,    384,    512,    640,    768,    896,
      1024,   1152,   1280,   1408,   1536,   1664,   1792,   1920,
      2048,   2176,   2304,   2432,   2560,   2688,   2816,   2944,
      3072,   3200,   3328,   3456,   3584,   3712,   3840,   3968,
     -4096,  -3968,  -3840,  -3712,  -3584,  -3456,  -3328,  -3200,
     -3072,  -2944,  -2816,  -2688,  -2560,  -2432,  -2304,  -2176,
     -2048,  -1920,  -1792,  -1664,  -1536,  -1408,  -1280,  -1152,
     -1024,   -896,   -768,   -640,   -512,   -384,   -256,   -128,

         0,    192,    384,    576,    768,    960,   1152,   1344,
      1536,   1728,   1920,   2112,   2304,   2496,   2688,   2880,
      3072,   3264,   3456,   3648,   3840,   4032,   4224,   4416,
      4608,   4800,   4992,   5184,   5376,   5568,   5760,   5952,
     -6144,  -5952,  -5760,  -5568,  -5376,  -5184,  -4992,  -4800,
     -4608,  -4416,  -4224,  -4032,  -3840,  -3648,  -3456,  -3264,
     -3072,  -2880,  -2688,  -2496,  -2304,  -2112,  -1920,  -1728,
     -1536,  -1344,  -1152,   -960,   -768,   -576,   -384,   -192,

         0,    256,    512,    768,   1024,   1280,   1536,   1792,
      2048,   2304,   2560,   2816,   3072,   3328,   3584,   3840,
      4096,   4352,   4608,   4864,   5120,   5376,   5632,   5888,
      6144,   6400,   6656,   6912,   7168,   7424,   7680,   7936,
     -8192,  -7936,  -7680,  -7424,  -7168,  -6912,  -6656,  -6400,
     -6144,  -5888,  -5632,  -5376,  -5120,  -4864,  -4608,  -4352,
     -4096,  -3840,  -3584,  -3328,  -3072,  -2816,  -2560,  -2304,
     -2048,  -1792,  -1536,  -1280,  -1024,   -768,   -512,   -256,

         0,    320,    640,    960,   1280,   1600,   1920,   2240,
      2560,   2880,   3200,   3520,   3840,   4160,   4480,   4800,
      5120,   5440,   5760,   6080,   6400,   6720,   7040,   7360,
      7680,   8000,   8320,   8640,   8960,   9280,   9600,   9920,
    -10240,  -9920,  -9600,  -9280,  -8960,  -8640,  -8320,  -8000,
     -7680,  -7360,  -7040,  -6720,  -6400,  -6080,  -5760,  -5440,
     -5120,  -4800,  -4480,  -4160,  -3840,  -3520,  -3200,  -2880,
     -2560,  -2240,  -1920,  -1600,  -1280,   -960,   -640,   -320,

         0,    384,    768,   1152,   1536,   1920,   2304,   2688,
      3072,   3456,   3840,   4224,   4608,   4992,   5376,   5760,
      6144,   6528,   6912,   7296,   7680,   8064,   8448,   8832,
      9216,   9600,   9984,  10368,  10752,  11136,  11520,  11904,
    -12288, -11904, -11520, -11136, -10752, -10368,  -9984,  -9600,
     -9216,  -8832,  -8448,  -8064,  -7680,  -7296,  -6912,  -6528,
     -6144,  -5760,  -5376,  -4992,  -4608,  -4224,  -3840,  -3456,
     -3072,  -2688,  -2304,  -1920,  -1536,  -1152,   -768,   -384,

         0,    448,    896,   1344,   1792,   2240,   2688,   3136,
      3584,   4032,   4480,   4928,   5376,   5824,   6272,   6720,
      7168,   7616,   8064,   8512,   8960,   9408,   9856,  10304,
     10752,  11200,  11648,  12096,  12544,  12992,  13440,  13888,
    -14336, -13888, -13440, -12992, -12544, -12096, -11648, -11200,
    -10752, -10304,  -9856,  -9408,  -8960,  -8512,  -8064,  -7616,
     -7168,  -6720,  -6272,  -5824,  -5376,  -4928,  -4480,  -4032,
     -3584,  -3136,  -2688,  -2240,  -1792,  -1344,   -896,   -448,

         0,    512,   1024,   1536,   2048,   2560,   3072,   3584,
      4096,   4608,   5120,   5632,   6144,   6656,   7168,   7680,
      8192,   8704,   9216,   9728,  10240,  10752,  11264,  11776,
     12288,  12800,  13312,  13824,  14336,  14848,  15360,  15872,
    -16384, -15872, -15360, -14848, -14336, -13824, -13312, -12800,
    -12288, -11776, -11264, -10752, -10240,  -9728,  -9216,  -8704,
     -8192,  -7680,  -7168,  -6656,  -6144,  -5632,  -5120,  -4608,
     -4096,  -3584,  -3072,  -2560,  -2048,  -1536,  -1024,   -512,

         0,    576,   1152,   1728,   2304,   2880,   3456,   4032,
      4608,   5184,   5760,   6336,   6912,   7488,   8064,   8640,
      9216,   9792,  10368,  10944,  11520,  12096,  12672,  13248,
     13824,  14400,  14976,  15552,  16128,  16704,  17280,  17856,
    -18432, -17856, -17280, -16704, -16128, -15552, -14976, -14400,
    -13824, -13248, -12672, -12096, -11520, -10944, -10368,  -9792,
     -9216,  -8640,  -8064,  -7488,  -6912,  -6336,  -5760,  -5184,
     -4608,  -4032,  -3456,  -2880,  -2304,  -1728,  -1152,   -576,

         0,    640,   1280,   1920,   2560,   3200,   3840,   4480,
      5120,   5760,   6400,   7040,   7680,   8320,   8960,   9600,
     10240,  10880,  11520,  12160,  12800,  13440,  14080,  14720,
     15360,  16000,  16640,  17280,  17920,  18560,  19200,  19840,
    -20480, -19840, -19200, -18560, -17920, -17280, -16640, -16000,
    -15360, -14720, -14080, -13440, -12800, -12160, -11520, -10880,
    -10240,  -9600,  -8960,  -8320,  -7680,  -7040,  -6400,  -5760,
     -5120,  -4480,  -3840,  -3200,  -2560,  -1920,  -1280,   -640,

         0,    704,   1408,   2112,   2816,   3520,   4224,   4928,
      5632,   6336,   7040,   7744,   8448,   9152,   9856,  10560,
     11264,  11968,  12672,  13376,  14080,  14784,  15488,  16192,
     16896,  17600,  18304,  19008,  19712,  20416,  21120,  21824,
    -22528, -21824, -21120, -20416, -19712, -19008, -18304, -17600,
    -16896, -16192, -15488, -14784, -14080, -13376, -12672, -11968,
    -11264, -10560,  -9856,  -9152,  -8448,  -7744,  -7040,  -6336,
     -5632,  -4928,  -4224,  -3520,  -2816,  -2112,  -1408,   -704,

         0,    768,   1536,   2304,   3072,   3840,   4608,   5376,
      6144,   6912,   7680,   8448,   9216,   9984,  10752,  11520,
     12288,  13056,  13824,  14592,  15360,  16128,  16896,  17664,
     18432,  19200,  19968,  20736,  21504,  22272,  23040,  23808,
    -24576, -23808, -23040, -22272, -21504, -20736, -19968, -19200,
    -18432, -17664, -16896, -16128, -15360, -14592, -13824, -13056,
    -12288, -11520, -10752,  -9984,  -9216,  -8448,  -7680,  -6912,
     -6144,  -5376,  -4608,  -3840,  -3072,  -2304,  -1536,   -768,

         0,    832,   1664,   2496,   3328,   4160,   4992,   5824,
      6656,   7488,   8320,   9152,   9984,  10816,  11648,  12480,
     13312,  14144,  14976,  15808,  16640,  17472,  18304,  19136,
     19968,  20800,  21632,  22464,  23296,  24128,  24960,  25792,
    -26624, -25792, -24960, -24128, -23296, -22464, -21632, -20800,
    -19968, -19136, -18304, -17472, -16640, -15808, -14976, -14144,
    -13312, -12480, -11648, -10816,  -9984,  -9152,  -8320,  -7488,
     -6656,  -5824,  -4992,  -4160,  -3328,  -2496,  -1664,   -832,

         0,    896,   1792,   2688,   3584,   4480,   5376,   6272,
      7168,   8064,   8960,   9856,  10752,  11648,  12544,  13440,
     14336,  15232,  16128,  17024,  17920,  18816,  19712,  20608,
     21504,  22400,  23296,  24192,  25088,  25984,  26880,  27776,
    -28672, -27776, -26880, -25984, -25088, -24192, -23296, -22400,
    -21504, -20608, -19712, -18816, -17920, -17024, -16128, -15232,
    -14336, -13440, -12544, -11648, -10752,  -9856,  -8960,  -8064,
     -7168,  -6272,  -5376,  -4480,  -3584,  -2688,  -1792,   -896,

         0,    960,   1920,   2880,   3840,   4800,   5760,   6720,
      7680,   8640,   9600,  10560,  11520,  12480,  13440,  14400,
     15360,  16320,  17280,  18240,  19200,  20160,  21120,  22080,
     23040,  24000,  24960,  25920,  26880,  27840,  28800,  29760,
    -30720, -29760, -28800, -27840, -26880, -25920, -24960, -24000,
    -23040, -22080, -21120, -20160, -19200, -18240, -17280, -16320,
    -15360, -14400, -13440, -12480, -11520, -10560,  -9600,  -8640,
     -7680,  -6720,  -5760,  -4800,  -3840,  -2880,  -1920,   -960,

         0,   1024,   2048,   3072,   4096,   5120,   6144,   7168,
      8192,   9216,  10240,  11264,  12288,  13312,  14336,  15360,
     16384,  17408,  18432,  19456,  20480,  21504,  22528,  23552,
     24576,  25600,  26624,  27648,  28672,  29696,  30720,  31744,
    -32768, -31744, -30720, -29696, -28672, -27648, -26624, -25600,
    -24576, -23552, -22528, -21504, -20480, -19456, -18432, -17408,
    -16384, -15360, -14336, -13312, -12288, -11264, -10240,  -9216,
     -8192,  -7168,  -6144,  -5120,  -4096,  -3072,  -2048,  -1024,
]

def decode(f, end_data=None):
    def chunks2(data):
        # Two bits, 7:6, 5:4, 3:2, 1:0
        lookup = lookup2[4*mod:4*(mod+1)]
        for byte in data:
            for i in range(0, 3):
                yield lookup[(byte >> 6) & 3]
                byte <<= 2
    def chunks3(data):
        # 3 bits a7:a5, a4:a2, a1:a0:b7, b6:b4, b3:b1, b1:c7:c6, c5:c3, c2:c0
        lookup = lookup3[8*mod:8*(mod+1)]
        avail = 0
        word = 0
        i = iter(data)
        try:
            while True:
                if avail < 3:
                    word = (word << 8) | next(i)
                    avail += 8
                avail -= 3
                yield lookup[(word >> avail) & 7]
                word >>= 3
        except StopIteration:
            return
    def chunks4(data):
        # 4 bits 3:0, 7:4
        lookup = lookup4[64*mod:64*(mod+1)][0::4]
        for byte in data:
            yield lookup[byte & 0xf]
            yield lookup[byte >> 4]
    def chunks5(data):
        # 5 bits a4:a0, b3:b0:a7, a6:b7:b4, c3:c0:a5, d3:d0:c7, c6:d7:d4, e3:e0:c5, c4:e7:e4
        lookup = lookup4[64*mod:64*(mod+1)][0::2]
        i = iter(data)
        try:
            while True:
                # What's the weirdest way we can break data into 5 bit chunks?
                extra = next(i)
                yield lookup[extra & 0x1f]
                extra >>= 5
                byte = next(i)
                yield lookup[((byte & 0xf) << 1) | (extra >> 2)]
                byte >>= 4
                extra &= 3
                yield lookup[byte | ((extra & 2) << 3)]
                extra &= 1
                byte = next(i)
                yield lookup[((byte & 0xf) << 1) | extra]
                extra = byte >> 4
                byte = next(i)
                yield lookup[((byte & 0xf) << 1) | (extra >> 3)]
                extra &= 7
                byte >>= 4
                yield lookup[byte | ((extra & 4) << 2)]
                extra &= 3
                byte = next(i)
                yield lookup[((byte & 0xf) << 1) | (extra >> 1)]
                extra &= 1
                byte >>= 4
                yield lookup[byte | (extra << 4)]
        except StopIteration:
            return
    def chunks6(data):
        # 6 bits a7:a2, a0:b7:b3, c4:c0:a1, c7:c5:b2:b0
        lookup = lookup4[64*mod:64*(mod+1)]
        i = iter(data)
        try:
            while True:
                a = next(i)
                yield lookup[a >> 2]
                a &= 3
                b = next(i)
                yield lookup[(b >> 3) | ((a & 1) << 5)]
                a >>= 1
                b &= 7
                c = next(i)
                yield lookup[((c & 0x1f) << 1) | a]
                c >>= 5
                yield lookup[(c << 3) | b]
        except StopIteration:
            return

    output = b''
    head_offset = f.tell()
    bits, end_data_offset = struct.unpack('<BHx', f.read(4))
    bits = [4, 5, 6, 2, 3][bits - 1]
    done = False
    sample_count = 32
    last1 = 0
    last2 = 0
    last_cmd_byte = 1
    end_data_cmds = []

    while True:
        if not done:
            cmd_byte = f.read(1)[0]
        else:
            cmd_byte = last_cmd_byte
        cmd = cmd_byte & 0x7
        mod = cmd_byte >> 3
        if cmd == 0:
            if mod == 0:
                # End token
                break
            elif mod == 1:
                silence_count = f.read(1)[0]
                output += b'\x00\x00' * silence_count
                last1 = last2 = 0
            elif mod == 2:
                silence_count = struct.unpack('<H', f.read(2))[0]
                output += b'\x00\x00' * silence_count
                last1 = last2 = 0
            elif mod == 3:
                # Runt
                sample_count = f.read(1)[0]
                if sample_count > 32:
                    raise Exception('Invalid runt sample count')
                done = True
            elif mod in (4, 5, 6, 7):
                end_data_cmds.append((len(output) / 2, mod - 4))
            else:
                raise Exception('Unexpected mod value')
        else:
            last_cmd_byte = cmd_byte
            byte_count = (sample_count * bits + 7) // 8
            data = f.read(byte_count)
            for i, sample in zip(range(sample_count), [chunks2, chunks3, chunks4, chunks5, chunks6][bits-2](data)):
                if cmd == 1:
                    pass
                elif cmd == 2:
                    sample += last1
                elif cmd == 3:
                    sample += last1 - last2 // 2
                elif cmd == 4:
                    sample += last1 * 2 - last2
                elif cmd == 5:
                    sample += last1 // 2
                elif cmd == 6:
                    sample += last1 // 2 - last2
                elif cmd == 7:
                    sample += last2 // 2
                if sample >= 0x8000 or sample < -0x8000:
                    raise Exception('Sample overflow unhandled')
                last2 = last1
                last1 = sample
                output += struct.pack('<h', sample)
            if done:
                break
    if end_data_offset == 0 or not len(end_data_cmds) or end_data is None:
        return output

    # Verify data is not within already processed data
    current_offset = f.tell() - head_offset
    if end_data_offset < current_offset:
        raise Exception('Invalid end data pointer')

    # Seek past any padding
    f.seek(end_data_offset - current_offset, 1)

    for sample, cmd in end_data_cmds:
        a = f.read(1)[0]
        count = a >> 2
        _cmd = a & 3
        if _cmd != cmd:
            raise Exception('End data command does not match')
        data = []
        for i in range(count):
            data.append((f.read(1)[0], f.read(1)[0]))
        end_data.append((sample, cmd, data))
    return output
